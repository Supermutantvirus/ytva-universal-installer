#!/sbin/sh
##########################################################################################
#                                                                                        #
# iYTBP Vanced Universal Installer                                                       #
#                                                                                        #
##########################################################################################
#                                                                                        #
# Magisk Module Template install script by topjohnwu                                     #
# merged with current iYTBP Vanced root installer by arter97 (and modified by ZaneZam)   #
#                                                                                        #
# Detach/Attach functions and Magisk module for them originated by hinxnz. borrowed      #
# and kindly modified by ZaneZam for the iYTBP Vanced project. Also changed some naming  #
# which can conflict with possible available original detach installations and removed   #
# stuff which is not needed for this script.                                             #
#                                                                                        #
##########################################################################################

INSTALLERVER="2.6 beta"

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

# This path should work in any cases
TMPDIR=/dev/tmp
MOUNTPATH=/magisk
IMG=/data/magisk.img
if $BOOTMODE; then
    MOUNTPATH=/dev/magisk_merge
    IMG=/data/magisk_merge.img
fi
INSTALLER=$TMPDIR/iYTBP
MAGISKBIN=/data/magisk
CONFOUND=false

# Default folder to search for Apk's
SEARCHFOLDER="*ownload*"

# Name of the Apk
APKFILENAME="iYTBP-*-vanced.apk"
APKFILENAMEOLD="Youtube_*-vanced-*backgroundplayback.apk"

# Vars for Detach script/module generation
DETACHFILE=$INSTALLER/hinxnz/iYTBP-detach
MAIN=$INSTALLER/hinxnz/iYTBP-detach-script
SCRIPT=99-iYTBP-detach.sh
ADDON=$INSTALLER/hinxnz/iYTBP-detach-addon
ADDOND=/system/addon.d
MAGIMG=/data/magisk.img
MAGMOD=/magisk/iYTBP-Detach
MAGSH=$MAGMOD/post-fs-data.sh
SQLITEMP=$INSTALLER/hinxnz/sqlite
SQLITESU=/ssu/bin/sqlite
SQLITES=/system/bin/sqlite
SQLITEM=$MAGMOD/sqlite
INIT=/system/etc/init.d
INITD=$INIT/99-iYTBP-detach
SUD=/system/su.d
SUDS=$SUD/$SCRIPT
SSUD=/ssu/su.d
SSUDS=$SSUD/$SCRIPT
SUIMG=/data/su.img

# default app location
SYSAPPFOLDER=system/app
SYSAPPFOLDERPRIV=system/priv-app
SYSADDFOLDER=/system/addon.d

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

ui_print() {
    if $BOOTMODE; then
	echo "$1"
    else
	echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
	echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
    fi
}

require_new_magisk() {
    ui_print " "
    ui_print "#####################################"
    ui_print "#                                   #"
    ui_print "#   $MAGISKBIN                      #"
    ui_print "#   isn't setup properly            #"
    ui_print "#   Please install Magisk v14.0+    #"
    ui_print "#                                   #"
    ui_print "#####################################"
    ui_print " "
    exit 1
}

apk_not_found() {
    ui_print " "
    ui_print "#####################################"
    ui_print "#                                   #"
    ui_print "#   No iYTBP Vanced Apk found!      #"
    ui_print "#   Please put the iYTBP Apk        #"
    ui_print "#   either into this installer zip  #"
    ui_print "#   or put it to the search folder  #"
    ui_print "#   you setup in config file or in  #"
    ui_print "#   this script without changing    #"
    ui_print "#   the file name and be sure that  #"
    ui_print "#   only one file exists so that    #"
    ui_print "#   the right one gets installed!   #"
    ui_print "#                                   #"
    ui_print "#   Currently set search folder:    #"
    ui_print "#   $SEARCHFOLDER                   #"
    ui_print "#                                   #"
    ui_print "#   Exiting now!                    #"
    ui_print "#                                   #"
    ui_print "#####################################"
    ui_print " "
    if ! $BOOTMODE; then
	umount /data 2>/dev/null
	umount /system 2>/dev/null
	exit 1
    fi
    exit 1
}

attach_detach_conflict() {
    ui_print " "
    ui_print "#####################################"
    ui_print "#                                   #"
    ui_print "#  Detach AND ALSO Attach setting   #"
    ui_print "#  is enabled. Please enable        #"
    ui_print "#  either Detach OR Attach setting  #"
    ui_print "#  not both of them at the same     #"
    ui_print "#  time!                            #"
    ui_print "#                                   #"
    ui_print "#  Exiting now!                     #"
    ui_print "#                                   #"
    ui_print "#####################################"
    ui_print " "
    if ! $BOOTMODE; then
	umount /data 2>/dev/null
	umount /system 2>/dev/null
	exit 1
    fi
    exit 1
}

deny_bootup_mode() {
    ui_print " "
    ui_print "#####################################"
    ui_print "#                                   #"
    ui_print "#  You used a setting which has     #"
    ui_print "#  to be executed in recovery       #"
    ui_print "#  If that is because of the root   #"
    ui_print "#  installer but you wanted to use  #"
    ui_print "#  magisk mode then u can enable    #"
    ui_print "#  it by putting the file:          #"
    ui_print "#  iYTBP_install_via_magisk.plz     #"
    ui_print "#  into your Download folder or     #"
    ui_print "#  enable the MAGINSTALL setting    #"
    ui_print "#  by giving it the value 'YES'     #"
    ui_print "#  If u wanted to uninstall iYBP    #"
    ui_print "#  u MUST always use recovery!      #"
    ui_print "#                                   #"
    ui_print "#  Exiting now!                     #"
    ui_print "#                                   #"
    ui_print "#####################################"
    ui_print " "
    if ! $BOOTMODE; then
	umount /data 2>/dev/null
	umount /system 2>/dev/null
	exit 1
    fi
    exit 1
}

no_magisk() {
    ui_print " "
    ui_print "#####################################"
    ui_print "#                                   #"
    ui_print "#  No Magisk installation found!    #"
    ui_print "#  However u still can use the      #"
    ui_print "#  root installer function          #"
    ui_print "#  Make sure that following files   #"
    ui_print "#  are NOT present in your          #"
    ui_print "#  Downlaod folder:                 #"
    ui_print "#  iYTBP_install_via_magisk.plz     #"
    ui_print "#  iYTBP_detach_from_playstore.plz  #"
    ui_print "#  iYTBP_attach_to_playstore.plz    #"
    ui_print "#  and make sure that MAGINSTALL    #"
    ui_print "#  DETACH, ATTACH settings are set  #"
    ui_print "#  to 'NO' in                       #"
    ui_print "#  iYTBP_use_this_settings.sh       #"
    ui_print "#  file and try again!              #"
    ui_print "#                                   #"
    ui_print "#  Exiting now!                     #"
    ui_print "#                                   #"
    ui_print "#####################################"
    ui_print " "
    if ! $BOOTMODE; then
	umount /data 2>/dev/null
	umount /system 2>/dev/null
	exit 1
    fi
    exit 1
}

OUTFD=$2
ZIP=$3

ui_print " "
ui_print ">>> iYTBP Vanced universal installer v${INSTALLERVER} <<<";
ui_print " "

# Check if detach setting file is available
DETACH=$(ls /data/media/*/${SEARCHFOLDER}/iYTBP_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
if echo "$DETACH" | grep -vq plz; then
    DETACH=$(ls /data/media/*/iYTBP_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
    if echo "$DETACH" | grep -vq plz; then
	DETACH=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/iYTBP_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACH" | grep -vq plz; then
	    DETACH=$(ls /mnt/expand/*/media/*/iYTBP_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	    if echo "$DETACH" | grep -vq plz; then
	        DETACH=NO
	    else
	        DETACH=YES
	    fi
	else
	    DETACH=YES
	fi
    else
	DETACH=YES
    fi
else
    DETACH=YES
fi

# Check if attach setting file is available
ATTACH=$(ls /data/media/*/${SEARCHFOLDER}/iYTBP_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
if echo "$ATTACH" | grep -vq plz; then
    ATTACH=$(ls /data/media/*/iYTBP_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
    if echo "$ATTACH" | grep -vq plz; then
	ATTACH=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/iYTBP_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACH" | grep -vq plz; then
	    ATTACH=$(ls /mnt/expand/*/media/*/iYTBP_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	    if echo "$ATTACH" | grep -vq plz; then
	        ATTACH=NO
	    else
	        ATTACH=NO
	    fi
	else
	    ATTACH=NO
	fi
    else
	ATTACH=NO
    fi
else
    ATTACH=NO
fi

# Check if magisk mode setting file is available
MAGINSTALL=$(ls /data/media/*/${SEARCHFOLDER}/iYTBP_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
if echo "$MAGINSTALL" | grep -vq plz; then
    MAGINSTALL=$(ls /data/media/*/iYTBP_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
    if echo "$MAGINSTALL" | grep -vq plz; then
	MAGINSTALL=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/iYTBP_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
	if echo "$MAGINSTALL" | grep -vq plz; then
	    MAGINSTALL=$(ls /mnt/expand/*/media/*/iYTBP_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
	    if echo "$MAGINSTALL" | grep -vq plz; then
	        MAGINSTALL=NO
	    else
		if [ -e $MAGIMG ]; then
		    ui_print "- Magisk detected! great so we can use it."
		    MAGINSTALL=YES
		else
		    no_magisk
		fi
	    fi
	else
	    if [ -e $MAGIMG ]; then
	        ui_print "- Magisk detected! great so we can use it."
	        MAGINSTALL=YES
	    else
	        no_magisk
	    fi
	fi
    else
	if [ -e $MAGIMG ]; then
	    ui_print "- Magisk detected! great so we can use it."
	    MAGINSTALL=YES
	else
	    no_magisk
	fi
    fi
else
    if [ -e $MAGIMG ]; then
        ui_print "- Magisk detected! great so we can use it."
        MAGINSTALL=YES
    else
        no_magisk
    fi
fi

# Check if uninstall setting file is available
UNINSTALL=$(ls /data/media/*/${SEARCHFOLDER}/iYTBP_uninstall.plz 2>/dev/null | sort | tail -n1)
if echo "$UNINSTALL" | grep -vq plz; then
    UNINSTALL=$(ls /data/media/*/iYTBP_uninstall.plz 2>/dev/null | sort | tail -n1)
    if echo "$UNINSTALL" | grep -vq plz; then
	UNINSTALL=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/iYTBP_uninstall.plz 2>/dev/null | sort | tail -n1)
	if echo "$UNINSTALL" | grep -vq plz; then
	    UNINSTALL=$(ls /mnt/expand/*/media/*/iYTBP_uninstall.plz 2>/dev/null | sort | tail -n1)
	    if echo "$UNINSTALL" | grep -vq plz; then
	        UNINSTALL=NO
	    else
		if ! $BOOTMODE; then
		    UNINSTALL=YES
		else
		    deny_bootup_mode
		fi
	    fi
	else
	    if ! $BOOTMODE; then
	        UNINSTALL=YES
	    else
	        deny_bootup_mode
	    fi
	fi
    else
	if ! $BOOTMODE; then
	    UNINSTALL=YES
	else
	    deny_bootup_mode
	fi
    fi
else
    if ! $BOOTMODE; then
        UNINSTALL=YES
    else
        deny_bootup_mode
    fi
fi

# Check if a config file is available on sdcard
CONFIG=$(ls /data/media/*/iYTBP_use_this_settings.sh 2>/dev/null | sort | tail -n1)
if echo "$CONFIG" | grep -q .sh; then
    ui_print "- Config file detected, reading $CONFIG"
    CONFOUND=true
    . $CONFIG
else
    CONFIG=$(ls /data/media/*/${SEARCHFOLDER}/iYTBP_use_this_settings.sh 2>/dev/null | sort | tail -n1)
    if echo "$CONFIG" | grep -q .sh; then
        ui_print "- Config file detected, reading $CONFIG."
	CONFOUND=true
        . $CONFIG
    fi
fi

# Check if a config file is available on adopted sdcard storage
if ! $CONFOUND; then
    CONFIG=$(ls /mnt/expand/*/media/*/iYTBP_use_this_settings.sh 2>/dev/null | sort | tail -n1)
    if echo "$CONFIG" | grep -q .sh; then
	ui_print "- Config file detected, reading $CONFIG"
	CONFOUND=true
	. $CONFIG
    else
	CONFIG=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/iYTBP_use_this_settings.sh 2>/dev/null | sort | tail -n1)
	if echo "$CONFIG" | grep -q .sh; then
	    ui_print "- Config file detected, reading $CONFIG."
	    CONFOUND=true
	    . $CONFIG
	fi
    fi
fi

if ! $CONFOUND; then
    ui_print "- No config file available using presets"
fi

# Special handling of all install setting if uninstall is requested + removing settings files + reseting config file
if [ "$UNINSTALL" = "YES" ]; then
    if ! $BOOTMODE; then
	ui_print "- Uninstall requested, removing settings files"
	DETACH=$(ls /data/media/*/iYTBP_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACH" | grep -q plz; then
	    rm -f $DETACH
	fi
	ATTACH=$(ls /data/media/*/iYTBP_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACH" | grep -q plz; then
	    rm -f $ATTACH
	fi
	MAGINSTALL=$(ls /data/media/*/iYTBP_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
	if echo "$MAGINSTALL" | grep -q plz; then
	    rm -f $MAGINSTALL
	fi
	UNINSTALL=$(ls /data/media/*/iYTBP_uninstall.plz 2>/dev/null | sort | tail -n1)
	if echo "$UNINSTALL" | grep -q plz; then
	    rm -f $UNINSTALL
	fi
	DETACH=$(ls /data/media/*/${SEARCHFOLDER}/iYTBP_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACH" | grep -q plz; then
	    rm -f $DETACH
	fi
	ATTACH=$(ls /data/media/*/${SEARCHFOLDER}/iYTBP_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACH" | grep -q plz; then
	    rm -f $ATTACH
	fi
	MAGINSTALL=$(ls /data/media/*/${SEARCHFOLDER}/iYTBP_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
	if echo "$MAGINSTALL" | grep -q plz; then
	    rm -f $MAGINSTALL
	fi
	UNINSTALL=$(ls /data/media/*/${SEARCHFOLDER}/iYTBP_uninstall.plz 2>/dev/null | sort | tail -n1)
	if echo "$UNINSTALL" | grep -q plz; then
	    rm -f $UNINSTALL
	fi
	DETACH=$(ls /storage/emulated/*/iYTBP_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACH" | grep -q plz; then
	    rm -f $DETACH
	fi
	ATTACH=$(ls /mnt/expand/*/media/*/iYTBP_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACH" | grep -q plz; then
	    rm -f $ATTACH
	fi
	MAGINSTALL=$(ls /mnt/expand/*/media/*/iYTBP_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
	if echo "$MAGINSTALL" | grep -q plz; then
	    rm -f $MAGINSTALL
	fi
	UNINSTALL=$(ls /mnt/expand/*/media/*/iYTBP_uninstall.plz 2>/dev/null | sort | tail -n1)
	if echo "$UNINSTALL" | grep -q plz; then
	    rm -f $UNINSTALL
	fi
	DETACH=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/iYTBP_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACH" | grep -q plz; then
	    rm -f $DETACH
	fi
	ATTACH=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/iYTBP_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACH" | grep -q plz; then
	    rm -f $ATTACH
	fi
	MAGINSTALL=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/iYTBP_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
	if echo "$MAGINSTALL" | grep -q plz; then
	    rm -f $MAGINSTALL
	fi
	UNINSTALL=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/iYTBP_uninstall.plz 2>/dev/null | sort | tail -n1)
	if echo "$UNINSTALL" | grep -q plz; then
	    rm -f $UNINSTALL
	fi
	# Turn on uninstallation and turn off all install settings
	UNINSTALL=YES
	MAGINSTALL=NO
	DETACH=NO
	ATTACH=NO
	# Turn off uninstall again for next usage of config file
	sed -i 's/UNINSTALL\=\"YES\"/UNINSTALL\=\"NO\"/g' $CONFIG
    else
	deny_bootup_mode
    fi
fi

# Detach/Attach both can't be
if [ "$ATTACH" = "YES" ] && [ "$DETACH" = "YES" ]; then
    attach_detach_conflict
fi

# Mount /data to access MAGISKBIN and check for installer
ui_print "- Mounting data partition"
mount /data 2>/dev/null
if mount | grep -q /data; then
    ui_print "- /data is now mounted"
else
    ui_print " "
    ui_print "!!! Data partition could not be mounted !!!"
    ui_print "!!! Cannot continue! mount it manually and try again !!!"
    ui_print " "
    exit 1
fi

# Mount /system for root mode later but not if magisk is used
if [ "$MAGINSTALL" = "NO" ]; then
    ui_print "- Mounting system partition"
    mount /system 2>/dev/null
    if mount | grep -q /system; then
	ui_print "- /system is now mounted"
	if [ -e /system/system ]; then
	    SYSAPPFOLDER=system/system/app
	    SYSAPPFOLDERPRIV=system/system/priv-app
	    SYSADDFOLDER=system/system/addon.d
	fi
    else
	ui_print " "
	ui_print "!!! System partition could not be mounted !!!"
	ui_print "!!! Cannot continue! mount it manually and try again !!!"
	ui_print " "
	exit 1
    fi
fi

# Create temp dir and extract installer files
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER
if [ -e $TMPDIR ]; then
    ui_print "- Extracting installer files"
    unzip -o "$ZIP" -d $INSTALLER > /dev/null 2>&1
else
    ui_print " "
    ui_print "!!! Temporary $TMPDIR directory not found! !!!"
    ui_print "!!! Cannot continue! Create $INSTALLER manually and try again !!!"
    ui_print " "
    exit 1
fi

# Get iYTBP apk with new and old filename, if not found "error" out
if [ "$UNINSTALL" = "NO" ]; then
    APK=$(ls ${INSTALLER}/${APKFILENAME} 2>/dev/null | sort | tail -n1)
    if echo "$APK" | grep -ivq apk; then
	APK=$(ls /data/media/*/${SEARCHFOLDER}/${APKFILENAME} 2>/dev/null | sort | tail -n1)
	if echo "$APK" | grep -ivq apk; then
	    APK=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/${APKFILENAME} 2>/dev/null | sort | tail -n1)
	    if echo "$APK" | grep -ivq apk; then
		APK=$(ls ${INSTALLER}/${APKFILENAMEOLD} 2>/dev/null | sort | tail -n1)
		if echo "$APK" | grep -ivq apk; then
		    APK=$(ls /data/media/*/${SEARCHFOLDER}/${APKFILENAMEOLD} 2>/dev/null | sort | tail -n1)
		    if echo "$APK" | grep -ivq apk; then
		        APK=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/${APKFILENAMEOLD} 2>/dev/null | sort | tail -n1)
		        if echo "$APK" | grep -ivq apk; then
			    apk_not_found
			fi
		    fi
		fi
	    fi
	fi
    fi
fi

# Prepare Detach script if detach settings files is in download folder
if [ "$DETACH" = "YES" ]; then
    ui_print "- Detach requested, preparing detach script"
    touch $DETACHFILE
    echo '#!/system/bin/sh' >> $DETACHFILE
    echo '' >> $DETACHFILE
    echo '# Detach Apps from playstore by hinxnz modified for the iYTBP Vanced project' >> $DETACHFILE
    echo '' >> $DETACHFILE
    echo '# Playstore database and SQLite directory' >> $DETACHFILE
    echo 'PLAY_DB_DIR=/data/data/com.android.vending/databases' >> $DETACHFILE
    if [ -e $MAGIMG ]; then
	echo 'SQLITE=/magisk/iYTBP-Detach' >> $DETACHFILE
    else
	ui_print "- $MAGIMG not found! Checking for $SUIMG"
	if [ -e $SUIMG ]; then
		echo 'SQLITE=/su/bin' >> $DETACHFILE
	else
		echo 'SQLITE=/system/bin' >> $DETACHFILE
	fi
    fi
    echo '' >> $DETACHFILE
    echo '# Wait till boot has completed'>> $DETACHFILE
    echo '(while [ 1 ]; do' >> $DETACHFILE
    echo '	if [ `getprop sys.boot_completed` = 1 ]; then sleep 60' >> $DETACHFILE
    echo '' >> $DETACHFILE
    echo '# Disable service that populates database' >> $DETACHFILE
    echo '      pm disable '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $DETACHFILE
    echo '' >> $DETACHFILE
    echo '# Stop playstore to make changes' >> $DETACHFILE
    echo '      am force-stop com.android.vending' >> $DETACHFILE
    echo '' >> $DETACHFILE
    echo '# Change directory' >> $DETACHFILE
    echo '      cd $SQLITE' >> $DETACHFILE
    echo '' >> $DETACHFILE
    echo '# Detach following apps from playstore' >> $DETACHFILE
    echo '' >> $DETACHFILE
    echo '  # YouTube' >> $DETACHFILE
    echo '	./sqlite $PLAY_DB_DIR/library.db "DELETE from ownership where doc_id = '\'com.google.android.youtube\''";' >> $DETACHFILE
    echo '	./sqlite $PLAY_DB_DIR/localappstate.db "DELETE from appstate where package_name = '\'com.google.android.youtube\''";' >> $DETACHFILE
    echo '' >> $DETACHFILE
    echo '# Exit' >> $DETACHFILE
    echo '	exit; fi' >> $DETACHFILE
    echo 'done &)' >> $DETACHFILE
    echo '' >> $DETACHFILE

    # If we have Magisk available generate module later otherwise use alternatives depending on availability
    if [ -e $MAGIMG ]; then
	ui_print "- Module $MAGMOD will be generated"
    else
	if [ -e $SUIMG ]; then
		ui_print "- Detach script will be installed to supersu image"
		mkdir /ssu
		ui_print "- Mounting $SUIMG to /ssu"
		mount -t ext4 -o rw $SUIMG /ssu
		if [ ! -e /ssu/su.d ]; then
			mkdir /ssu/su.d
		fi
		cp -f $SQLITEMP $SQLITESU
		chgrp 2000 $SQLITESU
		chmod 0755 $SQLITESU
		cp -f $DETACH $SSUDS
		chmod 0755 $SSUDS
		ui_print "- Module created, unmounting /ssu again"
		umount /ssu 2>/dev/null
		exit 0
	else
		if [ -e $INIT ]; then
			ui_print "- Detach script will be installed to init.d folder"
			cp -f $DETACH $INITD
			chmod 0755 $INITD
		else
			ui_print "- Detach script will be installed to su.d folder"
			if [ ! -e $SUD ]; then
				mkdir $SUD
			fi
			cp -f $DETACH $SUDS
			chmod 0755 $SUDS
		fi
		cp -f $SQLITEMP $SQLITES
		chgrp 2000 $SQLITES
		chmod 0755 $SQLITES
		exit 0
	fi

	# use addon.d as last resort
	if [ ! -e $MAGIMG ] && [ ! -e $SUIMG ] && [ -e $ADDOND ]; then
		ui_print "- Detach script will be installed to addon.d folder"
		cp -f $ADDON $ADDOND/90-iYTBP-detach.sh
		chmod 0755 $ADDOND/90-iYTBP-detach.sh
		exit 0
	fi
    fi
fi

# Prepare attach script if attach setting file is in download folder this will remove and undo the detachment parts (done as above by using the available init systems)
if [ "$ATTACH" = "YES" ]; then
    ui_print "- Attach requested, removing detach module after next boot"
    if [ -e $INITD ] || [ -e $SUDS ] || [ -e $SQLITES ]; then
	rm $INITD
	rm $SUDS
	rm $SQLITES
	rm $ADDOND/90-iYTBP-detach.sh
    fi

    if [ -e $MAGIMG ]; then
	ui_print "- Detach module will be removed from Magisk"
    else
	if [ -e $SUIMG ]; then
		ui_print "- Detach module will be removed from Supersu"
		mkdir /ssu
		mount -t ext4 -o rw $SUIMG /ssu
		rm $SQLITESU
		if [ -e $SSUDS ]; then
			echo '#!/system/bin/sh' > $SSUDS
			echo '' >> $SSUDS
			echo '(while [ 1 ]; do' >> $SSUDS
			echo '  if [ `getprop sys.boot_completed` = 1 ]; then sleep 60' >> $SSUDS
			echo '      pm enable '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $SSUDS
			echo '      pm enable '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $SSUDS
			echo '      am startservice '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $SSUDS
			echo '      am startservice '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $SSUDS
			echo '      rm /su/su.d/99-iYTBP-detach.sh' >> $SSUDS
			echo '  exit; fi' >> $SSUDS
			echo 'done &)' >> $SSUDS
		fi
		umount /ssu 2>/dev/null
		exit 0
	else
		if [ -e $INITD ]; then
			ui_print "- Detach module will be removed from init.d"
			echo '#!/system/bin/sh' > $INITD
			echo '' >> $INITD
			echo '(while [ 1 ]; do' >> $INITD
			echo '  if [ `getprop sys.boot_completed` = 1 ]; then sleep 60' >> $INITD
			echo '      pm enable '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $INITD
			echo '      pm enable '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $INITD
			echo '      am startservice '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $INITD
			echo '      am startservice '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $INITD
			echo '      mount -o rw,remount /system' >> $INITD
			echo '      rm /system/etc/init.d/iYTBP-99-detach' >> $INITD
			echo '  exit; fi' >> $INITD
			echo 'done &)' >> $INITD
			rm $SQLITES
			exit 0
		else
			if [ -e $SUDS ]; then
				ui_print "- Detach module will be removed from su.d"
				echo '#!/system/bin/sh' > $SUDS
				echo '' >> $SUDS
				echo '(while [ 1 ]; do' >> $SUDS
				echo '  if [ `getprop sys.boot_completed` = 1 ]; then sleep 60' >> $SUDS
				echo '      pm enable '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $SUDS
				echo '      pm enable '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $SUDS
				echo '      am startservice '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $SUDS
				echo '      am startservice '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $SUDS
				echo '      mount -o rw,remount /system' >> $SUDS
				echo '      rm /system/su.d/iYTBP-99-detach.sh' >> $SUDS
				echo '  exit; fi' >> $SUDS
				echo 'done &)' >> $SUDS
				rm $SQLITES
				exit 0
			fi
		fi
		rm $ADDOND/90-iYTBP-detach.sh
		rm $SQLITES
		exit 0
	fi
    fi
fi

# Use magisk installer if magisk setting file is available (this partially works also in Magisk manager)
if [ "$UNINSTALL" = "NO" ]; then
    if [ "$MAGINSTALL" = "YES" ]; then
	ui_print "- Using Magisk installer"
    else
	ui_print "- Using regular Root installer"
	if $BOOTMODE; then
	    deny_bootup_mode
	fi

	# iYTBP installer based on arter97 youtube adaway installer modified for the iYTBP project
	ui_print "- Using $APK";
	ui_print "- Removing previous versions (incl. magisk module)"
	if [ -e $MAGIMG ]; then
	    mount -t ext4 -o rw $MAGIMG $MAGISK
	    if [ ! -e $MAGMOD ]; then
		rm -rf $MAGMOD
	    fi
	    umount $MAGISK
	fi
	rm -rf /data/app/com.google.android.youtube*
	rm -rf /$SYSAPPFOLDER/YouTube
	rm -rf /$SYSAPPFOLDER/youtube
	rm -rf /$SYSAPPFOLDER/YouTube.apk!
	rm -rf /$SYSAPPFOLDER/youTube.apk!
	rm -rf /$SYSAPPFOLDERPRIV/YouTube
	rm -rf /$SYSAPPFOLDERPRIV/youtube
	rm -rf /$SYSAPPFOLDERPRIV/YouTube.apk!
	rm -rf /$SYSAPPFOLDERPRIV/youtube.apk!
	ui_print "- Removing YouTube app data"
	rm -rf /data/data/com.google.android.youtube*
	ui_print "- Installing libraries"
	mkdir -p /$SYSAPPFOLDER/YouTube/tmp
	cd /$SYSAPPFOLDER/YouTube/tmp
	unzip -o "$APK" -d . > /dev/null 2>&1
	mv lib ..
	cd ..
	rm -rf tmp
	cp "$APK" YouTube.apk
	cd lib
	# I don't know about x86, take care of arm32 and arm64
	# Better safe than sorry, make all sorts of symlinks
	if [ -e armeabi-v7a ]; then
	    ln -s armeabi-v7a armeabi
	    ln -s armeabi-v7a arm
	fi
	if [ -e arm64-v8a ]; then
	    ln -s arm64-v8a arm64
	fi
	cd ..
	ui_print "- Fixing permissions"
	# Fix permissions
	find /$SYSAPPFOLDER/YouTube -type f -exec chmod 644 {} \;
	find /$SYSAPPFOLDER/YouTube -type d -exec chmod 755 {} \;
	chmod 755 /$SYSAPPFOLDER/YouTube

	if [ -e /system/addon.d ]; then
	    ui_print "- Installing addon.d script"
	    # remove old script if available
	    rm -rf $SYSADDFOLDER/97-yt.sh
	    cp -af $INSTALLER/common/97-iYTBP.sh $SYSADDFOLDER/97-iYTBP.sh
	    chmod 755 $SYSADDFOLDER/97-iYTBP.sh
	fi

	if [ "$ATTACH" = "YES" -o "$DETACH" = "YES" ]; then
	    ui_print "- Root installer done!"
	    if [ -e $MAGIMG ]; then
		ui_print "- But now going on with attach/detach module install"
		DOPOSTROOT=YES
	    else 
		echo "Please reboot."
		ui_print " "
		exit 0
	    fi
	else
	    ui_print "- Unmounting partition /data"
	    umount /data 2>/dev/null
	    ui_print "- Unmounting partition /system"
	    umount /system 2>/dev/null
	    rm -rf /tmp/iYTBP
	    sync
	    ui_print "Root installer done! Please reboot."
	    ui_print " "
	    exit 0
	fi
    fi
fi

# Remove previous installed YT versions
if [ "$MAGINSTALL" = "YES" -o "$UNINSTALL" = "YES" ]; then
    ui_print "- Removing previous root version if it exists"
    rm -rf /data/app/com.google.android.youtube*
    rm -rf /$SYSAPPFOLDER/YouTube
    rm -rf /$SYSAPPFOLDER/youtube
    rm -rf /$SYSAPPFOLDER/YouTube.apk!
    rm -rf /$SYSAPPFOLDER/youTube.apk!
    rm -rf /$SYSAPPFOLDERPRIV/YouTube
    rm -rf /$SYSAPPFOLDERPRIV/youtube
    rm -rf /$SYSAPPFOLDERPRIV/YouTube.apk!
    rm -rf /$SYSAPPFOLDERPRIV/youTube.apk!
    rm /system/addon.d/97-iYTBP.sh
    rm /system/system/addon.d/97-iYTBP.sh
fi

# Unmount /system again
if ! $BOOTMODE; then
    ui_print "- Unmounting partition /system"
    umount /system 2>/dev/null
fi

# Here comes the Magisk module installation part by topjohnwu modified for the iYTBP project
ui_print "- Mounting /system, /vendor, /data, /cache"
mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
if mount | grep -q /data; then
    ui_print "- /data already mounted"
else
    mount /data 2>/dev/null
fi
mount /cache 2>/dev/null

# Utility functions must exist
[ -f $MAGISKBIN/util_functions.sh ] || require_new_magisk

# Load utility fuctions
. $MAGISKBIN/util_functions.sh

get_outfd

$BOOTMODE && ! is_mounted /magisk && abort "! Magisk is not activated!"
[ ! -f /system/build.prop ] && abort "! /system could not be mounted!"

# Detect version and architecture
api_level_arch_detect

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods
ui_print "- Your system is API${API} and is running on $ARCH"

# We need busybox/binaries to be setup
$BOOTMODE && boot_actions || recovery_actions

if [ "$UNINSTALL" = "NO" ]; then

    # Check if config file is available
    [ ! -f $INSTALLER/config.sh ] && abort "!!! Unable to extract zip file !!!"

    # Load configurations
    . $INSTALLER/config.sh

    # Check the min magisk version
    MIN_VER=`grep_prop template $INSTALLER/module.prop`
    [ ! -z $MAGISK_VER_CODE -a $MAGISK_VER_CODE -ge $MIN_VER ] || require_new_magisk
    MODID=`grep_prop id $INSTALLER/module.prop`
    MODPATH=$MOUNTPATH/$MODID

    # Print mod name
    print_modname

    # Please leave this message in your flashable zip for credits :)
    ui_print "**********************************"
    ui_print "* Powered by Magisk (@topjohnwu) *"
    ui_print "**********************************"
fi

# iYTBP Magisk installer mode
if [ "$UNINSTALL" = "NO" ]; then
    if [ "$MAGINSTALL" = "YES" ]; then
	ui_print "- Using $APK"
	rm -f $INSTALLER/system/placeholder
	mkdir -p $INSTALLER/$SYSAPPFOLDER/YouTube/tmp
	cd $INSTALLER/$SYSAPPFOLDER/YouTube/tmp
	unzip -o "$APK" -d . > /dev/null 2>&1
	mv lib ..
	cd ..
	rm -rf tmp
	cp "$APK" YouTube.apk
	cd lib
	if [ -e armeabi-v7a ]; then
	    ln -s armeabi-v7a armeabi
	    ln -s armeabi-v7a arm
	fi
	if [ -e arm64-v8a ]; then
	    ln -s arm64-v8a arm64
	fi
	cd ..
    fi
    request_zip_size_check "$ZIP"

    if [ -f "$IMG" ]; then
	ui_print "- Found $IMG"
	image_size_check $IMG
	if [ "$reqSizeM" -gt "$curFreeM" ]; then
	    newSizeM=$(((reqSizeM + curUsedM) / 32 * 32 + 64))
	    ui_print "- Resizing $IMG to ${newSizeM}M"
	    $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
	fi
    else
	newSizeM=$((reqSizeM / 32 * 32 + 64));
	ui_print "- Creating $IMG with size ${newSizeM}M"
	$MAGISKBIN/magisk --createimg $IMG $newSizeM
    fi
fi

# Mount Magisk image
ui_print "- Mounting $IMG to $MOUNTPATH"
MAGISKLOOP=`$MAGISKBIN/magisk --mountimg $IMG $MOUNTPATH`
is_mounted $MOUNTPATH || abort"!!! $IMG mount failed... !!!"

# Uninstall iYTBP modules if requested
if [ "$UNINSTALL" = "YES" -o "$DOPOSTROOT" = "YES" ]; then
    ui_print "- Removing iYTBP modules"
    if [ -e $MAGMOD -a "$UNINSTALL" = "YES" ]; then
        DETACH=NO
	ATTACH=YES
    fi
    if [ -e /magisk/iYTBP-Vanced ]; then
        rm -r /magisk/iYTBP-Vanced
    fi
fi

# Generate/install iYTBP detach module
if [ "$DETACH" = "YES" ]; then
	if [ ! -e $MAGMOD ]; then
		mkdir $MAGMOD
	fi
	ui_print "- Generating and copying detach module files"
	cp -f "$SQLITEMP" "$SQLITEM"
	chgrp 2000 "$SQLITEM"
	chmod 0755 $SQLITEM
	cp -f "$DETACHFILE" "$MAGSH"
	chmod 0755 $MAGSH
	touch $MAGMOD/module.prop
	chmod 0644 $MAGMOD/module.prop
	echo 'id=iYTBP-Detach' > $MAGMOD/module.prop
	echo 'name=iYTBP-Detach' >> $MAGMOD/module.prop
	echo 'version=v1.1 (created by iYTBP universal installer)' >> $MAGMOD/module.prop
	echo 'versionCode=3' >> $MAGMOD/module.prop
	echo 'author=hinxnz (modified by ZaneZam)' >> $MAGMOD/module.prop
	echo 'description=Detach playstore link of iYTBP Vanced app. based on original detach script v2.6 by hinxnz' >> $MAGMOD/module.prop
	echo 'support=http://forum.xda-developers.com/android/software-hacking/mod-detach-market-links-theme-ready-apps-t3447494' >> $MAGMOD/module.prop
	echo 'template=1400' >> $MAGMOD/module.prop
	ui_print "- Detach module created, unmounting $MOUNTPATH again"
fi

# Generate/install iYTBP attach script
if [ "$ATTACH" = "YES" ]; then
	rm $SQLITEM
	if [ -e $MAGSH ]; then
		echo '#!/system/bin/sh' > $MAGSH
		echo '' >> $MAGSH
		echo '(while [ 1 ]; do' >> $MAGSH
		echo '  if [ `getprop sys.boot_completed` = 1 ]; then sleep 60' >> $MAGSH
		echo '      pm enable '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $MAGSH
		echo '      pm enable '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $MAGSH
		echo '      am startservice '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $MAGSH
		echo '      am startservice '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $MAGSH
		echo '      rm -r /magisk/iYTBP-Detach' >> $MAGSH
		echo '  exit; fi' >> $MAGSH
		echo 'done &)' >> $MAGSH
		ui_print "- Attach script created, unmounting $MOUNTPATH again"
	fi
fi

# If we are using Magisk installer do all the "magisk" :)
if [ "$MAGINSTALL" = "YES" ]; then

    # Create mod paths
    rm -rf $MODPATH 2>/dev/null
    mkdir -p $MODPATH

    # Copy files
    ui_print "- Copying iYTBP Vanced module files"
    mv $INSTALLER/system $MODPATH/system

    # Handle replace folders
    for TARGET in $REPLACE; do
	mktouch $MODPATH$TARGET/.replace
    done

    # Auto Mount
    $AUTOMOUNT && touch $MODPATH/auto_mount

    # prop files
    $PROPFILE && cp -af $INSTALLER/common/system.prop $MODPATH/system.prop

    # Module info
    cp -af $INSTALLER/module.prop $MODPATH/module.prop

    if $BOOTMODE; then
	# Update info for Magisk Manager
	mktouch /magisk/$MODID/update
	cp -af $INSTALLER/module.prop /magisk/$MODID/module.prop
    fi

    # post-fs-data mode scripts
    $POSTFSDATA && cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh

    # service mode scripts
    $LATESTARTSERVICE && cp -af $INSTALLER/common/service.sh $MODPATH/service.sh
fi

# Not needed for Uninstall mode
if [ "$UNINSTALL" = "NO" ]; then
    ui_print "- Setting permissions"
    set_permissions
fi

# Unmounting Magisk image again
$MAGISKBIN/magisk --umountimg $MOUNTPATH $MAGISKLOOP
rmdir $MOUNTPATH

# Shrink the image if possible
image_size_check $IMG
newSizeM=$((curUsedM / 32 * 32 + 64))
if [ $curSizeM -gt $newSizeM ]; then
  ui_print "- Shrinking $IMG to ${newSizeM}M"
  $MAGISKBIN/magisk --resizeimg $IMG $newSizeM
fi

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

ui_print "- Magisk installer done! Please reboot."
ui_print " "
exit 0
