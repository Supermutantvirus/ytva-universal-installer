#!/sbin/sh
###########################################################################################
#                                                                                         #
# Youtube Vanced Universal Installer                                                      #
#                                                                                         #
###########################################################################################
#                                                                                         #
# Magisk Module Template install script by topjohnwu                                      #
# merged with Youtube Vanced root installer by arter97 (and modified by ZaneZam)          #
#                                                                                         #
# Detach/Attach functions and Magisk module for them originated by hinxnz. borrowed       #
# and kindly modified by ZaneZam for the Youtube Vanced project. Also changed some naming #
# which can conflict with possible available original detach installations and removed    #
# stuff which is not needed for this script.                                              #
#                                                                                         #
###########################################################################################

# ONLY FOR MAGISK v19.0 OR NEWER! USE UNIVERSAL INSTALLER v4.2 FOR <= MAGISK v18.1
INSTALLERVER="5.1"

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

TMPDIR=/dev/tmp
CONFOUND=false
ZIPFILE="$3"

# Handle message output differently between bootup and twrp otherwise some messages are not shown
if ! $BOOTMODE; then
    OUTFD=/proc/self/fd/$2;
else
    OUTFD=$2;
fi

# Default folder to search for apk's
SEARCHFOLDER="*ownload*"

# Name of the apk
APKFILENAME="Youtube_*-vanced.apk"

# Vars for Detach script/module generation etc.
DETACHFILE=$TMPDIR/hinxnz/ytva-detach
MAIN=$TMPDIR/hinxnz/ytva-detach-script
SCRIPT=99-ytva-detach.sh
ADDON=$TMPDIR/hinxnz/ytva-detach-addon
ADDOND=/system/addon.d
MAGBIN=/data/adb/magisk/magisk
MAGMOD=/data/adb/modules/YouTube-Vanced
MAGMODD=/data/adb/modules/YouTube-Vanced-Detach
MAGSH=$MAGMODD/post-fs-data.sh
SQLITEMP=$TMPDIR/hinxnz/sqlite
SQLITESU=/ssu/bin/sqlite
SQLITES=/system/bin/sqlite
SQLITEM=$MAGMODD/sqlite
INIT=/system/etc/init.d
INITD=$INIT/99-ytva-detach
SUD=/system/su.d
SUDS=$SUD/$SCRIPT
SSUD=/ssu/su.d
SSUDS=$SSUD/$SCRIPT
SUIMG=/data/su.img
DINSTFLAG=/data/ytva-detach-installed
MIN_MAG_VER=19000

# Default app location
SYSAPPFOLDER=system/app
SYSAPPFOLDERPRIV=system/priv-app
SYSADDFOLDER=/system/addon.d

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $TMPDIR

# Echo before loading util_functions
ui_print() {
if ! $BOOTMODE; then
    until [ ! "$1" ]; do
	echo -e "ui_print $1\nui_print" > $OUTFD;
	shift;
    done;
else
    echo "$1";
fi
}

require_new_magisk() {
    ui_print " "
    ui_print "#######################################"
    ui_print "#                                     #"
    ui_print "#   Please install latest Magisk!     #"
    ui_print "#                                     #"
    ui_print "#######################################"
    ui_print " "
    exit 1
}

apk_not_found() {
    ui_print " "
    ui_print "#######################################"
    ui_print "#                                     #"
    ui_print "#   No Youtube Vanced apk found!      #"
    ui_print "#   Please put the YTVA apk           #"
    ui_print "#   either into this installer zip    #"
    ui_print "#   or put it to the search folder    #"
    ui_print "#   you did setup in config file      #"
    ui_print "#   without changing the file name    #"
    ui_print "#   and be sure that only one file    #"
    ui_print "#   exists so that the desired one    #"
    ui_print "#   gets installed!                   #"
    ui_print "#                                     #"
    ui_print "#   Exiting now!                      #"
    ui_print "#                                     #"
    ui_print "#######################################"
    ui_print " "
    ui_print "INFO:"
    ui_print "Currently set search folder:"
    ui_print "$SEARCHFOLDER"
    ui_print " "
    if ! $BOOTMODE; then
	umount /data 2>/dev/null
	umount /system 2>/dev/null
	exit 1
    fi
    exit 1
}

attach_detach_conflict() {
    ui_print " "
    ui_print "#######################################"
    ui_print "#                                     #"
    ui_print "#   Detach AND ALSO attach setting    #"
    ui_print "#   is enabled. Please enable         #"
    ui_print "#   either detach OR attach setting   #"
    ui_print "#   not both of them at the same      #"
    ui_print "#   time!                             #"
    ui_print "#                                     #"
    ui_print "#   Exiting now!                      #"
    ui_print "#                                     #"
    ui_print "#######################################"
    ui_print " "
    if ! $BOOTMODE; then
	umount /data 2>/dev/null
	umount /system 2>/dev/null
	exit 1
    fi
    exit 1
}

deny_bootup_mode() {
    ui_print " "
    ui_print "#######################################"
    ui_print "#                                     #"
    ui_print "#   You are using a setting which     #"
    ui_print "#   can't be used in combination      #"
    ui_print "#   with magisk manager!              #"
    ui_print "#                                     #"
    ui_print "#   The installer MUST be used via    #"
    ui_print "#   TWRP (or compatible recovery)     #"
    ui_print "#   in that case now! So please       #"
    ui_print "#   enter your recovery and execute   #"
    ui_print "#   it there                          #"
    ui_print "#                                     #"
    ui_print "#   Exiting now!                      #"
    ui_print "#                                     #"
    ui_print "#######################################"
    ui_print " "
    if ! $BOOTMODE; then
	umount /data 2>/dev/null
	umount /system 2>/dev/null
	exit 1
    fi
    exit 1
}

check_min_magisk_version() {
  [ $MAGISK_VER_CODE -ge $MIN_MAG_VER ]
  return $?
}

wrong_magisk_version() {
    ui_print " "
    ui_print "#######################################"
    ui_print "#                                     #"
    ui_print "#   This Unversial installer is only  #"
    ui_print "#   compatible with Magisk v19 or     #"
    ui_print "#   newer! Please upgrade to newer    #"
    ui_print "#   version of Magisk or use older    #"
    ui_print "#   universal installer version.      #"
    ui_print "#                                     #"
    ui_print "#   Exiting now!                      #"
    ui_print "#                                     #"
    ui_print "#######################################"
    ui_print " "
    ui_print "INFO:"
    ui_print "Version $MAGISK_VER_CODE is installed"
    ui_print "but version $MIN_MAG_VER is needed!"
    ui_print " "
    if ! $BOOTMODE; then
	umount /data 2>/dev/null
	umount /system 2>/dev/null
	exit 1
    fi
    exit 1
}

no_magisk() {
    ui_print " "
    ui_print "#######################################"
    ui_print "#                                     #"
    ui_print "#   No Magisk installation found!     #"
    ui_print "#   However u still can use the       #"
    ui_print "#   root installer function           #"
    ui_print "#   Make sure that following '.plz'   #"
    ui_print "#   files are NOT present in your     #"
    ui_print "#   Download folder:                  #"
    ui_print "#   ytva_install_via_magisk           #"
    ui_print "#   ytva_detach_from_playstore        #"
    ui_print "#   ytva_only_detach_to_playstore     #"
    ui_print "#   ytva_attach_to_playstore          #"
    ui_print "#   ytva_only_attach_to_playstore     #"
    ui_print "#   and make sure that MAGINSTALL     #"
    ui_print "#   DETACH,ATTACH settings are set    #"
    ui_print "#   to 'NO' in                        #"
    ui_print "#   ytva_use_this_settings.sh         #"
    ui_print "#   file (if used) and try again!     #"
    ui_print "#                                     #"
    ui_print "#   Exiting now!                      #"
    ui_print "#                                     #"
    ui_print "#######################################"
    ui_print " "
    if ! $BOOTMODE; then
	umount /data 2>/dev/null
	umount /system 2>/dev/null
	exit 1
    fi
    exit 1
}

another_detach_found() {
    ui_print " "
    ui_print "#######################################"
    ui_print "#                                     #"
    ui_print "#   Already enabled detach method     #"
    ui_print "#   found !                           #"
    ui_print "#                                     #"
    ui_print "#   In order to use the dedicated     #"
    ui_print "#   detach script generated by this   #"
    ui_print "#   installer please remove the       #"
    ui_print "#   active magisk modules bundled     #"
    ui_print "#   detach script by putting a file   #"
    ui_print "#   named 'disable_detach' into       #"
    ui_print "#   /cache directory and rebooting    #"
    ui_print "#   your system afterwards.           #"
    ui_print "#                                     #"
    ui_print "#   Or in case u are using the        #"
    ui_print "#   official Detach magisk module     #"
    ui_print "#   by hinxnz/rom use it's attach     #"
    ui_print "#   function, remove it via           #" 
    ui_print "#   magisk manager and reboot.        #"
    ui_print "#                                     #"
    ui_print "#   NOTE: if any of the already       #"
    ui_print "#   running detach scripts work for   #"
    ui_print "#   u then u really don't need to     #"
    ui_print "#   install an additional one with    #"
    ui_print "#   this installer!                   #"
    ui_print "#                                     #"
    ui_print "#   Exiting now!                      #"
    ui_print "#                                     #"
    ui_print "#######################################"
    ui_print " "
    if ! $BOOTMODE; then
	umount /data 2>/dev/null
	umount /system 2>/dev/null
	exit 1
    fi
    exit 1
}

ui_print " "
ui_print ">>> Youtube Vanced Universal Installer v${INSTALLERVER} <<<";
ui_print " "

# Check if detach setup file is available
DETACH=$(ls /data/media/*/${SEARCHFOLDER}/ytva_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
if echo "$DETACH" | grep -vq plz; then
    DETACH=$(ls /data/media/*/ytva_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
    if echo "$DETACH" | grep -vq plz; then
	DETACH=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/ytva_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACH" | grep -vq plz; then
	    DETACH=$(ls /mnt/expand/*/media/*/ytva_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	    if echo "$DETACH" | grep -vq plz; then
	        DETACH=NO
	    else
	        DETACH=YES
	    fi
	else
	    DETACH=YES
	fi
    else
	DETACH=YES
    fi
else
    DETACH=YES
fi

# Check if detach only setup file is available
DETACHONLY=$(ls /data/media/*/${SEARCHFOLDER}/ytva_only_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
if echo "$DETACHONLY" | grep -vq plz; then
    DETACHONLY=$(ls /data/media/*/ytva_only_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
    if echo "$DETACHONLY" | grep -vq plz; then
	DETACHONLY=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/ytva_only_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACHONLY" | grep -vq plz; then
	    DETACHONLY=$(ls /mnt/expand/*/media/*/ytva_only_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	    if echo "$DETACHONLY" | grep -vq plz; then
	        DETACHONLY=NO
	    else
	        DETACHONLY=YES
	    fi
	else
	    DETACHONLY=YES
	fi
    else
	DETACHONLY=YES
    fi
else
    DETACHONLY=YES
fi

# Check if attach setup file is available
ATTACH=$(ls /data/media/*/${SEARCHFOLDER}/ytva_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
if echo "$ATTACH" | grep -vq plz; then
    ATTACH=$(ls /data/media/*/ytva_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
    if echo "$ATTACH" | grep -vq plz; then
	ATTACH=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/ytva_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACH" | grep -vq plz; then
	    ATTACH=$(ls /mnt/expand/*/media/*/ytva_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	    if echo "$ATTACH" | grep -vq plz; then
	        ATTACH=NO
	    else
	        ATTACH=YES
	    fi
	else
	    ATTACH=YES
	fi
    else
	ATTACH=YES
    fi
else
    ATTACH=YES
fi

# Check if attach only setup file is available
ATTACHONLY=$(ls /data/media/*/${SEARCHFOLDER}/ytva_only_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
if echo "$ATTACHONLY" | grep -vq plz; then
    ATTAACHONLY=$(ls /data/media/*/ytva_only_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
    if echo "$ATTACHONLY" | grep -vq plz; then
	ATTACHONLY=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/ytva_only_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACHONLY" | grep -vq plz; then
	    ATTAACHONLY=$(ls /mnt/expand/*/media/*/ytva_only_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	    if echo "$ATTACHONLY" | grep -vq plz; then
	        ATTACHONLY=NO
	    else
	        ATTACHONLY=YES
	    fi
	else
	    ATTACHONLY=YES
	fi
    else
	ATTACHONLY=YES
    fi
else
    ATTACHONLY=YES
fi

# Check if magisk mode setup file is available
MAGINSTALL=$(ls /data/media/*/${SEARCHFOLDER}/ytva_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
if echo "$MAGINSTALL" | grep -vq plz; then
    MAGINSTALL=$(ls /data/media/*/ytva_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
    if echo "$MAGINSTALL" | grep -vq plz; then
	MAGINSTALL=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/ytva_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
	if echo "$MAGINSTALL" | grep -vq plz; then
	    MAGINSTALL=$(ls /mnt/expand/*/media/*/ytva_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
	    if echo "$MAGINSTALL" | grep -vq plz; then
	        MAGINSTALL=NO
	    else
		if [ -e $MAGBIN ]; then
		    ui_print "- Magisk detected, so we can use it."
		    MAGINSTALL=YES
		else
		    no_magisk
		fi
	    fi
	else
	    if [ -e $MAGBIN ]; then
		ui_print "- Magisk detected, so we can use it."
	        MAGINSTALL=YES
	    else
	        no_magisk
	    fi
	fi
    else
	if [ -e $MAGBIN ]; then
	    ui_print "- Magisk detected, so we can use it."
	    MAGINSTALL=YES
	else
	    no_magisk
	fi
    fi
else
    if [ -e $MAGBIN ]; then
	ui_print "- Magisk detected, so we can use it."
        MAGINSTALL=YES
    else
        no_magisk
    fi
fi

# Check if delete data setup file is available
DELETEDATA=$(ls /data/media/*/${SEARCHFOLDER}/ytva_delete_data.plz 2>/dev/null | sort | tail -n1)
if echo "$DELETEDATA" | grep -vq plz; then
    DELETEDATA=$(ls /data/media/*/ytva_delete_data.plz 2>/dev/null | sort | tail -n1)
    if echo "$DELETEDATA" | grep -vq plz; then
	DELETEDATA=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/ytva_delete_data.plz 2>/dev/null | sort | tail -n1)
	if echo "$DELETEDATA" | grep -vq plz; then
	    DELETEDATA=$(ls /mnt/expand/*/media/*/ytva_delete_data.plz 2>/dev/null | sort | tail -n1)
	    if echo "$DELETEDATA" | grep -vq plz; then
	        DELETEDATA=NO
	    else
	        DELETEDATA=YES
	    fi
	else
	    DELETEDATA=YES
	fi
    else
	DELETEDATA=YES
    fi
else
    DELETEDATA=YES
fi

# Check if uninstall setup file is available
UNINSTALL=$(ls /data/media/*/${SEARCHFOLDER}/ytva_uninstall.plz 2>/dev/null | sort | tail -n1)
if echo "$UNINSTALL" | grep -vq plz; then
    UNINSTALL=$(ls /data/media/*/ytva_uninstall.plz 2>/dev/null | sort | tail -n1)
    if echo "$UNINSTALL" | grep -vq plz; then
	UNINSTALL=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/ytva_uninstall.plz 2>/dev/null | sort | tail -n1)
	if echo "$UNINSTALL" | grep -vq plz; then
	    UNINSTALL=$(ls /mnt/expand/*/media/*/ytva_uninstall.plz 2>/dev/null | sort | tail -n1)
	    if echo "$UNINSTALL" | grep -vq plz; then
	        UNINSTALL=NO
	    else
		if ! $BOOTMODE; then
		    UNINSTALL=YES
		else
		    deny_bootup_mode
		fi
	    fi
	else
	    if ! $BOOTMODE; then
	        UNINSTALL=YES
	    else
	        deny_bootup_mode
	    fi
	fi
    else
	if ! $BOOTMODE; then
	    UNINSTALL=YES
	else
	    deny_bootup_mode
	fi
    fi
else
    if ! $BOOTMODE; then
        UNINSTALL=YES
    else
        deny_bootup_mode
    fi
fi

# Check if a config file is available on sdcard
CONFIG=$(ls /data/media/*/ytva_use_this_settings.sh 2>/dev/null | sort | tail -n1)
if echo "$CONFIG" | grep -q .sh; then
    ui_print "- Settings file detected, reading $CONFIG"
    CONFOUND=true
    . $CONFIG
else
    CONFIG=$(ls /data/media/*/${SEARCHFOLDER}/ytva_use_this_settings.sh 2>/dev/null | sort | tail -n1)
    if echo "$CONFIG" | grep -q .sh; then
        ui_print "- Settings file detected, reading $CONFIG."
	CONFOUND=true
        . $CONFIG
    fi
fi

# Check if a config file is available on adopted sdcard storage
if ! $CONFOUND; then
    CONFIG=$(ls /mnt/expand/*/media/*/ytva_use_this_settings.sh 2>/dev/null | sort | tail -n1)
    if echo "$CONFIG" | grep -q .sh; then
	ui_print "- Settings file detected, reading $CONFIG"
	CONFOUND=true
	. $CONFIG
    else
	CONFIG=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/ytva_use_this_settings.sh 2>/dev/null | sort | tail -n1)
	if echo "$CONFIG" | grep -q .sh; then
	    ui_print "- Settings file detected, reading $CONFIG."
	    CONFOUND=true
	    . $CONFIG
	fi
    fi
fi

# No settings file available
if ! $CONFOUND; then
    ui_print "- No settings file found, using presets or setup files if available"
fi

# Special handling of all install settings if uninstall is requested + removing setup files + resetting config file
if [ "$UNINSTALL" = "YES" ]; then
    if ! $BOOTMODE; then
	ui_print "- Uninstall requested, removing setup files"
	DETACH=$(ls /data/media/*/ytva_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACH" | grep -q plz; then
	    rm -f $DETACH
	fi
	ATTACH=$(ls /data/media/*/ytva_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACH" | grep -q plz; then
	    rm -f $ATTACH
	fi
	MAGINSTALL=$(ls /data/media/*/ytva_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
	if echo "$MAGINSTALL" | grep -q plz; then
	    rm -f $MAGINSTALL
	fi
	UNINSTALL=$(ls /data/media/*/ytva_uninstall.plz 2>/dev/null | sort | tail -n1)
	if echo "$UNINSTALL" | grep -q plz; then
	    rm -f $UNINSTALL
	fi
	DETACH=$(ls /data/media/*/${SEARCHFOLDER}/ytva_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACH" | grep -q plz; then
	    rm -f $DETACH
	fi
	ATTACH=$(ls /data/media/*/${SEARCHFOLDER}/ytva_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACH" | grep -q plz; then
	    rm -f $ATTACH
	fi
	MAGINSTALL=$(ls /data/media/*/${SEARCHFOLDER}/ytva_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
	if echo "$MAGINSTALL" | grep -q plz; then
	    rm -f $MAGINSTALL
	fi
	UNINSTALL=$(ls /data/media/*/${SEARCHFOLDER}/ytva_uninstall.plz 2>/dev/null | sort | tail -n1)
	if echo "$UNINSTALL" | grep -q plz; then
	    rm -f $UNINSTALL
	fi
	DETACH=$(ls /storage/emulated/*/ytva_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACH" | grep -q plz; then
	    rm -f $DETACH
	fi
	ATTACH=$(ls /mnt/expand/*/media/*/ytva_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACH" | grep -q plz; then
	    rm -f $ATTACH
	fi
	MAGINSTALL=$(ls /mnt/expand/*/media/*/ytva_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
	if echo "$MAGINSTALL" | grep -q plz; then
	    rm -f $MAGINSTALL
	fi
	UNINSTALL=$(ls /mnt/expand/*/media/*/ytva_uninstall.plz 2>/dev/null | sort | tail -n1)
	if echo "$UNINSTALL" | grep -q plz; then
	    rm -f $UNINSTALL
	fi
	DETACH=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/ytva_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACH" | grep -q plz; then
	    rm -f $DETACH
	fi
	ATTACH=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/ytva_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACH" | grep -q plz; then
	    rm -f $ATTACH
	fi
	MAGINSTALL=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/ytva_install_via_magisk.plz 2>/dev/null | sort | tail -n1)
	if echo "$MAGINSTALL" | grep -q plz; then
	    rm -f $MAGINSTALL
	fi
	UNINSTALL=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/ytva_uninstall.plz 2>/dev/null | sort | tail -n1)
	if echo "$UNINSTALL" | grep -q plz; then
	    rm -f $UNINSTALL
	fi
	DETACHONLY=$(ls /data/media/*/ytva_only_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACHONLY" | grep -q plz; then
	    rm -f $DETACHONLY
	fi
	ATTACHONLY=$(ls /data/media/*/ytva_only_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACHONLY" | grep -q plz; then
	    rm -f $ATTACHONLY
	fi
	DETACHONLY=$(ls /data/media/*/${SEARCHFOLDER}/ytva_only_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACHONLY=" | grep -q plz; then
	    rm -f $DETACHONLY
	fi
	ATTACHONLY=$(ls /data/media/*/${SEARCHFOLDER}/ytva_only_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACHONLY" | grep -q plz; then
	    rm -f $ATTACHONLY
	fi
	DETACHONLY=$(ls /storage/emulated/*/ytva_only_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACHONLY" | grep -q plz; then
	    rm -f $DETACHONLY
	fi
	ATTACHONLY=$(ls /mnt/expand/*/media/*/ytva_only_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACHONLY" | grep -q plz; then
	    rm -f $ATTACHONLY
	fi
	DETACHONLY=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/ytva_only_detach_from_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$DETACHONLY" | grep -q plz; then
	    rm -f $DETACHONLY
	fi
	ATTACHONLY=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/ytva_only_attach_to_playstore.plz 2>/dev/null | sort | tail -n1)
	if echo "$ATTACHONLY" | grep -q plz; then
	    rm -f $ATTACHONLY
	fi
	# Turn on uninstallation and turn off all install settings
	UNINSTALL=YES
	MAGINSTALL=NO
	DETACH=NO
	if [ -e $DINSTFLAG ]; then
	    ATTACH=YES
	else
	    ATTACH=NO
	fi
	# Turn off uninstall again for next usage of config file
	sed -i 's/UNINSTALL\=\"YES\"/UNINSTALL\=\"NO\"/g' $CONFIG
    else
	deny_bootup_mode
    fi
fi

# Detach or attach? both can't be
if [ "$ATTACH" = "YES" ] && [ "$DETACH" = "YES" ]; then
    attach_detach_conflict
fi
if [ "$ATTACHONLY" = "YES" ] && [ "$DETACHONLY" = "YES" ]; then
    attach_detach_conflict
fi

# Mount /data to access MAGISKBIN and check for installer
ui_print "- Mounting data partition"
mount /data 2>/dev/null
if mount | grep -q /data; then
    ui_print "- /data is now mounted"
else
    ui_print " "
    ui_print "!!! Data partition could not be mounted !!!"
    ui_print "!!! Cannot continue! mount it manually and try again !!!"
    ui_print " "
    exit 1
fi

# Load utility functions and check if magisk version is high enough for this installer
if [ -e $MAGBIN ]; then
    OUTFD=$2;
    if [ -f /data/adb/magisk/util_functions.sh ]; then
	. /data/adb/magisk/util_functions.sh
	NVBASE=/data/adb
    else
	require_new_magisk
    fi
    if [ "$MAGINSTALL" = "YES" -o "$DETACHONLY" = "YES" ]; then
	# Check if magisk version is high enough
	check_min_magisk_version || wrong_magisk_version
    fi
fi

# Mount /system for root mode later but not if magisk is used
if [ "$MAGINSTALL" = "NO" ]; then
    ui_print "- Mounting system partition"
    mount /system 2>/dev/null
    if mount | grep -q /system; then
	ui_print "- /system is now mounted"
	if [ -e /system/system ]; then
	    SYSAPPFOLDER=system/system/app
	    SYSAPPFOLDERPRIV=system/system/priv-app
	    SYSADDFOLDER=system/system/addon.d
	fi
    else
	ui_print " "
	ui_print "!!! System partition could not be mounted !!!"
	ui_print "!!! Cannot continue! mount it manually and try again !!!"
	ui_print " "
	exit 1
    fi
fi

# Extract installer files
if [ -e $TMPDIR ]; then
    ui_print "- Extracting installer files"
    unzip -o "$ZIPFILE" -d $TMPDIR > /dev/null 2>&1
else
    ui_print " "
    ui_print "!!! Temporary $TMPDIR directory not found! !!!"
    ui_print "!!! Cannot continue! Create $TMPDIR manually and try again !!!"
    ui_print " "
    exit 1
fi

# Get YTVA apk filename, if not found "error" out
if [ "$UNINSTALL" = "NO" ]; then
    APK=$(ls ${TMPDIR}/${APKFILENAME} 2>/dev/null | sort | tail -n1)
    if echo "$APK" | grep -ivq apk; then
	APK=$(ls /data/media/*/${SEARCHFOLDER}/${APKFILENAME} 2>/dev/null | sort | tail -n1)
	if echo "$APK" | grep -ivq apk; then
	    APK=$(ls /mnt/expand/*/media/*/${SEARCHFOLDER}/${APKFILENAME} 2>/dev/null | sort | tail -n1)
	    if echo "$APK" | grep -ivq apk; then
		if [ "$DETACHONLY" = "NO" ] && [ "$ATTACHONLY" = "NO" ]; then
		    apk_not_found
		fi
	    fi
	fi
    fi
fi

# Prepare detach script if detach setup files are in download folder
if [ "$DETACH" = "YES" -o "$DETACHONLY" = "YES" ]; then
    ui_print "- Detach requested, preparing detach script"
    if [ -e /data/ytva-magisk-detach-enabled ] || [ -d /data/adb/modules/Detach ]; then
	another_detach_found
    fi
    if [ -e $MAGBIN ]; then
	cp $TMPDIR/hinxnz/detach-script-magisk $DETACHFILE
    else
	ui_print "- $MAGBIN not found! Checking for $SUIMG"
	if [ -e $SUIMG ]; then
		cp $TMPDIR/hinxnz/detach-script-supersu $DETACHFILE
	else
		cp $TMPDIR/hinxnz/detach-script-system $DETACHFILE
	fi
    fi
    # If we have Magisk available generate module later otherwise use alternatives depending on availability
    if [ -e $MAGBIN ]; then
	ui_print "- Module YouTube-Vanced-Detach will be generated"
    else
	if [ -e $SUIMG ]; then
	    ui_print "- Detach script will be installed to supersu image"
	    mkdir /ssu
	    ui_print "- Mounting $SUIMG to /ssu"
	    mount -t ext4 -o rw $SUIMG /ssu
	    if [ ! -e /ssu/su.d ]; then
		mkdir /ssu/su.d
	    fi
	    cp -f "$SQLITEMP" "$SQLITESU"
	    chgrp 2000 "$SQLITESU"
	    chmod 0755 "$SQLITESU"
	    cp -f "$DETACHFILE" "$SSUDS"
	    chmod 0755 "$SSUDS"
	    ui_print "- Module created, unmounting /ssu again"
	    umount /ssu 2>/dev/null
	    echo "Please keep this file! It's a flag for the YTVA universal installer." > $DINSTFLAG
	    if [ "$DETACHONLY" = "YES" ]; then
	        ui_print "done! Please reboot."
		exit 0
	    fi
	else
	    if [ -e $INIT ]; then
		ui_print "- Detach script will be installed to init.d folder"
		cp -f "$DETACHFILE" "$INITD"
		chmod 0755 "$INITD"
	    else
		ui_print "- Detach script will be installed to su.d folder"
		if [ ! -e $SUD ]; then
		    mkdir $SUD
		fi
		cp -f "$DETACHFILE" "$SUDS"
		chmod 0755 "$SUDS"
	    fi
		cp -f "$SQLITEMP" "$SQLITES"
		chgrp 2000 "$SQLITES"
		chmod 0755 "$SQLITES"
	    if [ "$DETACHONLY" = "YES" ]; then
	        ui_print "Done! Please reboot."
	        exit 0
	    fi
	fi
	if [ ! -e $MAGBIN ] && [ ! -e $SUIMG ] && [ -e $ADDOND ]; then
	    ui_print "- Detach files will be preserved via addon.d folder"
	    cp -f "$ADDON" "${ADDOND}/90-ytva-detach.sh"
	    chmod 0755 "${ADDOND}/90-ytva-detach.sh"
	    if [ "$DETACHONLY" = "YES" ]; then
	        ui_print "done! Please reboot."
	        exit 0
	    fi
	fi
    fi
fi

# Prepare attach script if attach setup file is in download folder. this will remove and undo the detachment parts (done as above by using the available init systems)
if [ "$ATTACH" = "YES" -o "$ATTACHONLY" = "YES" ]; then
    if $BOOTMODE; then
        deny_bootup_mode
    fi
    ui_print "- Attach requested, removing detach module 60 sec after next boot"
    if [ -e $INITD ] || [ -e $SUDS ] || [ -e $SQLITES ]; then
	rm $INITD
	rm $SUDS
	rm $SQLITES
	rm $ADDOND/90-ytva-detach.sh
    fi
    if [ -e $MAGBIN ]; then
	ui_print "- Detach module will be removed from Magisk"
    else
	if [ -e $SUIMG ]; then
	    ui_print "- Detach module will be removed from Supersu"
	    mkdir /ssu
	    mount -t ext4 -o rw $SUIMG /ssu
	    rm $SQLITESU
	    rm -f $DINSTFLAG
	    if [ -e $SSUDS ]; then
		echo '#!/system/bin/sh' > $SSUDS
		echo '' >> $SSUDS
		echo '(while [ 1 ]; do' >> $SSUDS
		echo '  if [ `getprop sys.boot_completed` = 1 ]; then sleep 60' >> $SSUDS
		echo '      pm enable '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $SSUDS
		echo '      pm enable '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $SSUDS
		echo '      am startservice '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $SSUDS
		echo '      am startservice '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $SSUDS
		echo '      rm /su/su.d/99-ytva-detach.sh' >> $SSUDS
		echo '  exit; fi' >> $SSUDS
		echo 'done &)' >> $SSUDS
	    fi
	    umount /ssu 2>/dev/null
	    if [ "$ATTACHONLY" = "YES" ]; then
	        ui_print "Done! Please reboot."
	        exit 0
	    fi
	else
	    if [ -e $INITD ]; then
		ui_print "- Detach module will be removed from init.d"
		echo '#!/system/bin/sh' > $INITD
		echo '' >> $INITD
		echo '(while [ 1 ]; do' >> $INITD
		echo '  if [ `getprop sys.boot_completed` = 1 ]; then sleep 60' >> $INITD
		echo '      pm enable '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $INITD
		echo '      pm enable '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $INITD
		echo '      am startservice '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $INITD
		echo '      am startservice '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $INITD
		echo '      mount -o rw,remount /system' >> $INITD
		echo '      rm /system/etc/init.d/99-ytva-detach' >> $INITD
		echo '  exit; fi' >> $INITD
		echo 'done &)' >> $INITD
		rm $SQLITES
		rm -f $DINSTFLAG
		if [ "$ATTACHONLY" = "YES" ]; then
		    ui_print "Done! Please reboot."
		    exit 0
		fi
	    else
		if [ -e $SUDS ]; then
		    ui_print "- Detach module will be removed from su.d"
		    echo '#!/system/bin/sh' > $SUDS
		    echo '' >> $SUDS
		    echo '(while [ 1 ]; do' >> $SUDS
		    echo '  if [ `getprop sys.boot_completed` = 1 ]; then sleep 60' >> $SUDS
		    echo '      pm enable '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $SUDS
		    echo '      pm enable '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $SUDS
		    echo '      am startservice '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $SUDS
		    echo '      am startservice '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $SUDS
		    echo '      mount -o rw,remount /system' >> $SUDS
		    echo '      rm /system/su.d/99-ytva-detach.sh' >> $SUDS
		    echo '  exit; fi' >> $SUDS
		    echo 'done &)' >> $SUDS
		    rm $SQLITES
		    rm -f $DINSTFLAG
		    if [ "$ATTACHONLY" = "YES" ]; then
		        ui_print "done! Please reboot."
			exit 0
		    fi
		fi
	    fi
	    rm $ADDOND/90-ytva-detach.sh
	    rm $SQLITES
	    rm -f $DINSTFLAG
	    if [ "$ATTACHONLY" = "YES" ]; then
		ui_print "done! Please reboot."
		exit 0
	    fi
	fi
    fi
fi

# Use magisk installer if magisk setup file is available
if [ "$UNINSTALL" = "NO" ] && [ "$DETACHONLY" = "NO" ] && [ "$ATTACHONLY" = "NO" ]; then
    if [ "$MAGINSTALL" = "YES" ]; then
	ui_print "- Using Magisk installer"
	rm -f /data/ytva-root-install
    else
	if $BOOTMODE; then
	    deny_bootup_mode
	fi
	ui_print "- Using regular Root installer"
	DOPOSTROOT=NO
	echo "Please keep this file! It's a flag for the YTVA universal installer." > /data/ytva-root-install
	# YTVA installer based on arter97 youtube adaway installer modified for the YTVA project
	ui_print "- Using $APK";
	ui_print "- Removing previous versions (incl. magisk module)"
	if [ -e $MAGBIN ]; then
	    if [ -e $MAGMOD ]; then
		rm -rf $MAGMOD
	    fi
	fi
	rm -rf /data/app/com.google.android.youtube*
	rm -rf /$SYSAPPFOLDER/YouTube
	rm -rf /$SYSAPPFOLDER/youtube
	rm -rf /$SYSAPPFOLDER/YouTube.apk!
	rm -rf /$SYSAPPFOLDER/youTube.apk!
	rm -rf /$SYSAPPFOLDERPRIV/YouTube
	rm -rf /$SYSAPPFOLDERPRIV/youtube
	rm -rf /$SYSAPPFOLDERPRIV/YouTube.apk!
	rm -rf /$SYSAPPFOLDERPRIV/youtube.apk!
	# Oreo+ specific: remove previous YT traces
	if [ -e /data/system/package_cache ]; then
	    ui_print "- Removing YouTube app package caches"
	    rm -f /data/system/package_cache/1/YouTube*
	    rm -f /data/dalvik-cache/arm64/system@app@YouTube@YouTube.apk@classes.dex
	    rm -f /data/dalvik-cache/arm64/system@app@YouTube@YouTube.apk@classes.vdex
	fi
	if [ "$DELETEDATA" = "YES" ]; then
	    ui_print "- Removing YouTube app data"
	    rm -rf /data/data/com.google.android.youtube*
	fi
	ui_print "- Installing libraries"
	mkdir -p /$SYSAPPFOLDER/YouTube/tmp
	cd /$SYSAPPFOLDER/YouTube/tmp
	unzip -o "$APK" -d . > /dev/null 2>&1
	mv lib ..
	cd ..
	rm -rf tmp
	cp "$APK" YouTube.apk
	cd lib
	# I don't know about x86, take care of arm32 and arm64
	# Better safe than sorry, make all sorts of symlinks
	if [ -e armeabi-v7a ]; then
	    ln -s armeabi-v7a armeabi
	    ln -s armeabi-v7a arm
	fi
	if [ -e arm64-v8a ]; then
	    ln -s arm64-v8a arm64
	fi
	cd ..
	ui_print "- Fixing permissions"
	# Fix permissions
	find /$SYSAPPFOLDER/YouTube -type f -exec chmod 644 {} \;
	find /$SYSAPPFOLDER/YouTube -type d -exec chmod 755 {} \;
	chmod 755 /$SYSAPPFOLDER/YouTube
	if [ -e /system/addon.d ]; then
	    ui_print "- Installing addon.d script"
	    # remove old script if available
	    rm -rf $SYSADDFOLDER/97-yt.sh
	    cp -af $TMPDIR/common/97-ytva.sh $SYSADDFOLDER/97-ytva.sh
	    chmod 755 $SYSADDFOLDER/97-ytva.sh
	fi
	if [ "$ATTACH" = "YES" -o "$DETACH" = "YES" ]; then
	    ui_print "- Root installer done!"
	    if [ -e $MAGBIN ]; then
		ui_print "- But now going on with attach/detach module install"
		DOPOSTROOT=YES
	    else
		echo "Please reboot."
		ui_print " "
		exit 0
	    fi
	else
	    ui_print "- Unmounting partition /data"
	    umount /data 2>/dev/null
	    ui_print "- Unmounting partition /system"
	    umount /system 2>/dev/null
	    rm -rf /tmp/YTVA
	    sync
	    ui_print "Root installer done! Please reboot."
	    ui_print " "
	    exit 0
	fi
    fi
fi

# Remove previous installed YT versions
if [ "$MAGINSTALL" = "YES" -o "$UNINSTALL" = "YES" ]; then
    ui_print "- Removing previous root version if it exists"
    rm -rf /data/app/com.google.android.youtube*
    rm -rf /$SYSAPPFOLDER/YouTube
    rm -rf /$SYSAPPFOLDER/youtube
    rm -rf /$SYSAPPFOLDER/YouTube.apk!
    rm -rf /$SYSAPPFOLDER/youTube.apk!
    rm -rf /$SYSAPPFOLDERPRIV/YouTube
    rm -rf /$SYSAPPFOLDERPRIV/youtube
    rm -rf /$SYSAPPFOLDERPRIV/YouTube.apk!
    rm -rf /$SYSAPPFOLDERPRIV/youTube.apk!
    # Oreo+ specific: remove previous YT traces
    if [ -e /data/system/package_cache ]; then
	ui_print "- Removing YouTube app package caches"
	rm -f /data/system/package_cache/1/YouTube*
	rm -f /data/dalvik-cache/arm64/system@app@YouTube@YouTube.apk@classes.dex
	rm -f /data/dalvik-cache/arm64/system@app@YouTube@YouTube.apk@classes.vdex
    fi
    if [ "$DELETEDATA" = "YES" ]; then
	ui_print "- Removing YouTube app data"
	rm -rf /data/data/com.google.android.youtube*
    fi
    rm /system/addon.d/97-ytva.sh
    rm /system/system/addon.d/97-ytva.sh
fi

# Unmount /system again
if ! $BOOTMODE; then
    ui_print "- Unmounting partition /system"
    umount /system 2>/dev/null
fi

# Exit here if we uninstall and no magisk is used but go on if we need to attach
if [ "$DOPOSTROOT" = "" ] && [ "$ATTACH" = "NO" ]; then
    if [ -e /data/ytva-root-install -a "$UNINSTALL" = "YES" ]; then
	rm -f /data/ytva-root-install
	ui_print "- Unmounting partition /data"
	umount /data 2>/dev/null
	ui_print "- Uninstallation done. Please reboot!"
	ui_print " "
	exit 0
    fi
elif [ -e /data/ytva-root-install -a "$UNINSTALL" = "YES" ]; then
    rm -f /data/ytva-root-install
fi

# Here comes the Magisk module installation part by topjohnwu modified for the YTVA project
if mount | grep -q /data; then
    ui_print "- /data already mounted"
else
    mount /data 2>/dev/null
fi

# Preperation for flashable zips
setup_flashable

# Mount partitions
mount_partitions

# Detect version and architecture
api_level_arch_detect

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods
if $IS64BIT; then
    ui_print "- Your system is API${API} and is running on $ARCH 64bit"
else
    ui_print "- Your system is API${API} and is running on $ARCH"
fi

# Setup busybox and binaries
$BOOTMODE && boot_actions || recovery_actions

if [ "$UNINSTALL" = "NO" ]; then

    [ ! -f $TMPDIR/install.sh ] && abort "! Unable to extract zip file!"
    # Load install script
    . $TMPDIR/install.sh

    $BOOTMODE && MODDIRNAME=modules_update || MODDIRNAME=modules
    MODULEROOT=$NVBASE/$MODDIRNAME

    MODID=`grep_prop id $TMPDIR/module.prop`
    MODPATH=$MODULEROOT/$MODID

    print_modname

    ui_print "**********************************"
    ui_print "* Powered by Magisk (@topjohnwu) *"
    ui_print "**********************************"
fi

# YTVA preperation for Magisk installer mode
if [ "$UNINSTALL" = "NO" -a "$MAGINSTALL" = "YES" ]; then
    ui_print "- Using $APK"
    rm -f $TMPDIR/system/placeholder
    mkdir -p $TMPDIR/$SYSAPPFOLDER/YouTube/tmp
    cd $TMPDIR/$SYSAPPFOLDER/YouTube/tmp
    unzip -o "$APK" -d . > /dev/null 2>&1
    mv lib ..
    cd ..
    rm -rf tmp
    cp "$APK" YouTube.apk
    cd lib
    if [ -e armeabi-v7a ]; then
        mv armeabi-v7a arm
    fi
    if [ -e arm64-v8a ]; then
        mv arm64-v8a arm64
    fi
    cd ..
fi

# Remove YTVA and detach module if requested or only remove YTVA module if we are installing root version
if [ "$UNINSTALL" = "YES" -o "$DOPOSTROOT" = "YES" ]; then
    ui_print "- Removing YTVA module and/or detach module if available"
    if [ -e $MAGMODD -a "$UNINSTALL" = "YES" ]; then
	DETACH=NO
	ATTACH=YES
    fi
    if [ -e $MAGMOD ]; then
        rm -rf $MAGMOD
    fi
fi

# Generate/install YTVA detach module
if [ "$DETACH" = "YES" -o "$DETACHONLY" = "YES" ]; then
    if [ ! -e $MAGMODD ]; then
	mkdir $MAGMODD
    fi
    ui_print "- Generating and copying detach module files"
    cp -f "$SQLITEMP" "$SQLITEM"
    chgrp 2000 "$SQLITEM"
    chmod 0755 $SQLITEM
    cp -f "$DETACHFILE" "$MAGSH"
    chmod 0755 $MAGSH
    touch $MAGMODD/module.prop
    chmod 0644 $MAGMODD/module.prop
    echo 'id=YouTube-Vanced-Detach' > $MAGMODD/module.prop
    echo 'name=YouTube Vanced Detach' >> $MAGMODD/module.prop
    echo 'version=v1.5 (created by universal installer)' >> $MAGMODD/module.prop
    echo 'versionCode=7' >> $MAGMODD/module.prop
    echo 'author=Team Vanced' >> $MAGMODD/module.prop
    echo 'description=Detach playstore link of Youtube Vanced app. based on original detach script v2.6 by hinxnz' >> $MAGMODD/module.prop
    echo 'support=http://forum.xda-developers.com/android/software-hacking/mod-detach-market-links-theme-ready-apps-t3447494' >> $MAGMODD/module.prop
    if $BOOTMODE; then
	mktouch $MAGMODD/update
    fi
    ui_print "- Detach module created"
    echo "Please keep this file! It's a flag for the YTVA universal installer." > $DINSTFLAG
fi

# Generate/install YTVA attach script
if [ "$ATTACH" = "YES" -o "$ATTACHONLY" = "YES" ]; then
    rm $SQLITEM
    rm -f $DINSTFLAG
    if [ -e $MAGSH ]; then
	echo '#!/system/bin/sh' > $MAGSH
	echo '' >> $MAGSH
	echo 'rm -f /cache/uimod_enable_detach' >> $MAGSH
	echo 'rm -f /cache/uimod_detach.log' >> $MAGSH
	echo '(while [ 1 ]; do' >> $MAGSH
	echo '  if [ `getprop sys.boot_completed` = 1 ]; then sleep 120' >> $MAGSH
	echo '      pm enable '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $MAGSH
	echo '      pm enable '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $MAGSH
	echo '      am startservice '\'com.android.vending/com.google.android.finsky.dailyhygiene.DailyHygiene'$'DailyHygieneService\''' >> $MAGSH
	echo '      am startservice '\'com.android.vending/com.google.android.finsky.hygiene.DailyHygiene'$'DailyHygieneService\''' >> $MAGSH
	echo '      rm -rf /data/adb/modules/YouTube-Vanced-Detach' >> $MAGSH
	echo '  exit; fi' >> $MAGSH
	echo 'done &)' >> $MAGSH
	ui_print "- Attach script created"
    fi
fi

# If we are using Magisk installer do all the "magisk" :)
if [ "$MAGINSTALL" = "YES" ]; then

    # Initial cleanup
    rm -rf $MODPATH 2>/dev/null
    mkdir -p $MODPATH

    on_install

    # Remove placeholder
    rm -f $MODPATH/system/placeholder 2>/dev/null

    # Custom uninstaller
    [ -f $TMPDIR/uninstall.sh ] && cp -af $TMPDIR/uninstall.sh $MODPATH/uninstall.sh

    # Skip Mount v19+
    $SKIPMOUNT && touch $MODPATH/skip_mount

    # prop files
    $PROPFILE && cp -af $TMPDIR/common/system.prop $MODPATH/system.prop

    # Module info
    cp -af $TMPDIR/module.prop $MODPATH/module.prop
    if $BOOTMODE; then
        # Update info for Magisk Manager
	mktouch $NVBASE/modules/$MODID/update
	cp -af $TMPDIR/module.prop $NVBASE/modules/$MODID/module.prop
    fi

    # post-fs-data mode scripts
    $POSTFSDATA && cp -af $TMPDIR/common/post-fs-data.sh $MODPATH/post-fs-data.sh

    # service mode scripts
    $LATESTARTSERVICE && cp -af $TMPDIR/common/service.sh $MODPATH/service.sh

    # Handle replace folders
    for TARGET in $REPLACE; do
	mktouch $MODPATH$TARGET/.replace
    done
fi

# Not needed for Uninstall mode
if [ "$UNINSTALL" = "NO" ]; then
    ui_print "- Setting permissions"
    set_permissions
    # in addition needed because subfolders under lib don't get set properly
    find $MODPATH/system/app/YouTube/lib -type d -exec chmod 755 {} \;
fi

cd /
$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

ui_print "- Magisk installer done! Please reboot."
ui_print " "
exit 0
